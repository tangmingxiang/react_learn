{
  "compilerOptions": {
    "noImplicitAny": false, // 不需要显式地声明变量的类型 any
    "target": "es5", // 编译后的目标JavaScript版本：ES5、ES6/ES2015、ES2016、ES2017、ES2018、ES2019、ES2020、ESNext
    "lib": [ // 列出了编译期间所有需要包括进来的库文件（即告诉编译器哪些功能可以使用），一般编译器会含有默认的库文件
      "dom", // document.getElementById('root')
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true, // 允许混合编译 JavaScript 文件
    "skipLibCheck": true,
    "esModuleInterop": true, // 允许使用 CommonJS 的方式 import 默认文件 import React from 'react' // interoperable adj.互相操作的;配合动作的;互用的
    // "esModuleInterop": false, // import * as React from 'react'
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext", // 配置代码的模块系统：主要有 Node.js 的 CommonJS、ES6 标准的 esnext、requirejs 的 AMD
    "moduleResolution": "node", // 决定了编译器的工作方式："node"、"classic"(已废弃)
    "resolveJsonModule": true, // 若为 false，则不能导入.json 文件，即不能 import test from './test.json', 另外开启该选项时，需要配置 "moduleResolution": "node"
    "isolatedModules": true, // 编译器会将每个文件作为单独的模块来使用
    "noEmit": true, // 表示当发生编译错误的时候，编译器不要生成 JavaScript 代码
    "jsx": "react-jsx" // 允许编译器支持编译 react 代码, 总共有 preserve（会输出 .jsx 的文件）、react（输出原生 js 文件）、react-jsx、react-jsxdev、react-native，更多信息可参考 https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
  },
  "include": [
    "src"
  ]
}
